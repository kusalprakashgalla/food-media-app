{"ast":null,"code":"'use strict';\n\nvar $ = require('../internals/export');\nvar getBuiltIn = require('../internals/get-built-in');\nvar call = require('../internals/function-call');\nvar anObject = require('../internals/an-object');\nvar isConstructor = require('../internals/is-constructor');\nvar getIterator = require('../internals/get-iterator');\nvar getMethod = require('../internals/get-method');\nvar iterate = require('../internals/iterate');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar OBSERVABLE_FORCED = require('../internals/observable-forced');\nvar $$OBSERVABLE = wellKnownSymbol('observable');\n\n// `Observable.from` method\n// https://github.com/tc39/proposal-observable\n$({\n  target: 'Observable',\n  stat: true,\n  forced: OBSERVABLE_FORCED\n}, {\n  from: function from(x) {\n    var C = isConstructor(this) ? this : getBuiltIn('Observable');\n    var observableMethod = getMethod(anObject(x), $$OBSERVABLE);\n    if (observableMethod) {\n      var observable = anObject(call(observableMethod, x));\n      return observable.constructor === C ? observable : new C(function (observer) {\n        return observable.subscribe(observer);\n      });\n    }\n    var iterator = getIterator(x);\n    return new C(function (observer) {\n      iterate(iterator, function (it, stop) {\n        observer.next(it);\n        if (observer.closed) return stop();\n      }, {\n        IS_ITERATOR: true,\n        INTERRUPTED: true\n      });\n      observer.complete();\n    });\n  }\n});","map":null,"metadata":{},"sourceType":"script"}