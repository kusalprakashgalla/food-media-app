{"ast":null,"code":"'use strict';\n\nvar FREEZING = require('../internals/freezing');\nvar $ = require('../internals/export');\nvar shared = require('../internals/shared');\nvar getBuiltIn = require('../internals/get-built-in');\nvar makeBuiltIn = require('../internals/make-built-in');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar apply = require('../internals/function-apply');\nvar anObject = require('../internals/an-object');\nvar toObject = require('../internals/to-object');\nvar isCallable = require('../internals/is-callable');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar defineProperty = require('../internals/object-define-property').f;\nvar createArrayFromList = require('../internals/array-slice-simple');\nvar cooked = require('../internals/string-cooked');\nvar parse = require('../internals/string-parse');\nvar whitespaces = require('../internals/whitespaces');\nvar WeakMap = getBuiltIn('WeakMap');\nvar globalDedentRegistry = shared('GlobalDedentRegistry', new WeakMap());\n\n/* eslint-disable no-self-assign -- prototype methods protection */\nglobalDedentRegistry.has = globalDedentRegistry.has;\nglobalDedentRegistry.get = globalDedentRegistry.get;\nglobalDedentRegistry.set = globalDedentRegistry.set;\n/* eslint-enable no-self-assign -- prototype methods protection */\n\nvar $Array = Array;\nvar $TypeError = TypeError;\n// eslint-disable-next-line es/no-object-freeze -- safe\nvar freeze = Object.freeze || Object;\n// eslint-disable-next-line es/no-object-isfrozen -- safe\nvar isFrozen = Object.isFrozen;\nvar min = Math.min;\nvar charAt = uncurryThis(''.charAt);\nvar stringSlice = uncurryThis(''.slice);\nvar split = uncurryThis(''.split);\nvar exec = uncurryThis(/./.exec);\nvar NEW_LINE = /([\\n\\u2028\\u2029]|\\r\\n?)/g;\nvar LEADING_WHITESPACE = RegExp('^[' + whitespaces + ']*');\nvar NON_WHITESPACE = RegExp('[^' + whitespaces + ']');\nvar INVALID_TAG = 'Invalid tag';\nvar INVALID_OPENING_LINE = 'Invalid opening line';\nvar INVALID_CLOSING_LINE = 'Invalid closing line';\nvar dedentTemplateStringsArray = function dedentTemplateStringsArray(template) {\n  var rawInput = template.raw;\n  // https://github.com/tc39/proposal-string-dedent/issues/75\n  if (FREEZING && !isFrozen(rawInput)) throw $TypeError('Raw template should be frozen');\n  if (globalDedentRegistry.has(rawInput)) return globalDedentRegistry.get(rawInput);\n  var raw = dedentStringsArray(rawInput);\n  var cookedArr = cookStrings(raw);\n  defineProperty(cookedArr, 'raw', {\n    value: freeze(raw)\n  });\n  freeze(cookedArr);\n  globalDedentRegistry.set(rawInput, cookedArr);\n  return cookedArr;\n};\nvar dedentStringsArray = function dedentStringsArray(template) {\n  var t = toObject(template);\n  var length = lengthOfArrayLike(t);\n  var blocks = $Array(length);\n  var dedented = $Array(length);\n  var i = 0;\n  var lines, common;\n  if (!length) throw $TypeError(INVALID_TAG);\n  for (; i < length; i++) {\n    var element = t[i];\n    if (typeof element == 'string') blocks[i] = split(element, NEW_LINE);else throw $TypeError(INVALID_TAG);\n  }\n  for (i = 0; i < length; i++) {\n    var lastSplit = i + 1 === length;\n    lines = blocks[i];\n    if (i === 0) {\n      if (lines.length === 1 || lines[0].length > 0) {\n        throw $TypeError(INVALID_OPENING_LINE);\n      }\n      lines[1] = '';\n    }\n    if (lastSplit) {\n      if (lines.length === 1 || exec(NON_WHITESPACE, lines[lines.length - 1])) {\n        throw $TypeError(INVALID_CLOSING_LINE);\n      }\n      lines[lines.length - 2] = '';\n      lines[lines.length - 1] = '';\n    }\n    for (var j = 2; j < lines.length; j += 2) {\n      var text = lines[j];\n      var lineContainsTemplateExpression = j + 1 === lines.length && !lastSplit;\n      var leading = exec(LEADING_WHITESPACE, text)[0];\n      if (!lineContainsTemplateExpression && leading.length === text.length) {\n        lines[j] = '';\n        continue;\n      }\n      common = commonLeadingIndentation(leading, common);\n    }\n  }\n  var count = common ? common.length : 0;\n  for (i = 0; i < length; i++) {\n    lines = blocks[i];\n    for (var quasi = lines[0], k = 1; k < lines.length; k += 2) {\n      quasi += lines[k] + stringSlice(lines[k + 1], count);\n    }\n    dedented[i] = quasi;\n  }\n  return dedented;\n};\nvar commonLeadingIndentation = function commonLeadingIndentation(a, b) {\n  if (b === undefined || a === b) return a;\n  var i = 0;\n  for (var len = min(a.length, b.length); i < len; i++) {\n    if (charAt(a, i) !== charAt(b, i)) break;\n  }\n  return stringSlice(a, 0, i);\n};\nvar cookStrings = function cookStrings(raw) {\n  for (var i = 0, length = raw.length, result = $Array(length); i < length; i++) {\n    result[i] = parse(raw[i]);\n  }\n  return result;\n};\nvar makeDedentTag = function makeDedentTag(tag) {\n  return makeBuiltIn(function (template /* , ...substitutions */) {\n    var args = createArrayFromList(arguments);\n    args[0] = dedentTemplateStringsArray(anObject(template));\n    return apply(tag, this, args);\n  }, '');\n};\nvar cookedDedentTag = makeDedentTag(cooked);\n\n// `String.dedent` method\n// https://github.com/tc39/proposal-string-dedent\n$({\n  target: 'String',\n  stat: true,\n  forced: true\n}, {\n  dedent: function dedent(templateOrFn /* , ...substitutions */) {\n    anObject(templateOrFn);\n    if (isCallable(templateOrFn)) return makeDedentTag(templateOrFn);\n    return apply(cookedDedentTag, this, arguments);\n  }\n});","map":null,"metadata":{},"sourceType":"script"}