{"ast":null,"code":"'use strict';\n\nvar $ = require('../internals/export');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\nvar parseInt = require('../internals/number-parse-int');\nvar INVALID_NUMBER_REPRESENTATION = 'Invalid number representation';\nvar INVALID_RADIX = 'Invalid radix';\nvar $RangeError = RangeError;\nvar $SyntaxError = SyntaxError;\nvar $TypeError = TypeError;\nvar valid = /^[\\da-z]+$/;\nvar charAt = uncurryThis(''.charAt);\nvar exec = uncurryThis(valid.exec);\nvar numberToString = uncurryThis(1.0.toString);\nvar stringSlice = uncurryThis(''.slice);\n\n// `Number.fromString` method\n// https://github.com/tc39/proposal-number-fromstring\n$({\n  target: 'Number',\n  stat: true,\n  forced: true\n}, {\n  fromString: function fromString(string, radix) {\n    var sign = 1;\n    var R, mathNum;\n    if (typeof string != 'string') throw $TypeError(INVALID_NUMBER_REPRESENTATION);\n    if (!string.length) throw $SyntaxError(INVALID_NUMBER_REPRESENTATION);\n    if (charAt(string, 0) == '-') {\n      sign = -1;\n      string = stringSlice(string, 1);\n      if (!string.length) throw $SyntaxError(INVALID_NUMBER_REPRESENTATION);\n    }\n    R = radix === undefined ? 10 : toIntegerOrInfinity(radix);\n    if (R < 2 || R > 36) throw $RangeError(INVALID_RADIX);\n    if (!exec(valid, string) || numberToString(mathNum = parseInt(string, R), R) !== string) {\n      throw $SyntaxError(INVALID_NUMBER_REPRESENTATION);\n    }\n    return sign * mathNum;\n  }\n});","map":null,"metadata":{},"sourceType":"script"}