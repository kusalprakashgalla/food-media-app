{"ast":null,"code":"'use strict';\n\n// https://github.com/tc39/proposal-explicit-resource-management\nvar $ = require('../internals/export');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar getBuiltIn = require('../internals/get-built-in');\nvar aCallable = require('../internals/a-callable');\nvar anInstance = require('../internals/an-instance');\nvar defineBuiltIn = require('../internals/define-built-in');\nvar defineBuiltIns = require('../internals/define-built-ins');\nvar defineBuiltInAccessor = require('../internals/define-built-in-accessor');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar InternalStateModule = require('../internals/internal-state');\nvar addDisposableResource = require('../internals/add-disposable-resource');\nvar SuppressedError = getBuiltIn('SuppressedError');\nvar $ReferenceError = ReferenceError;\nvar DISPOSE = wellKnownSymbol('dispose');\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\nvar DISPOSABLE_STACK = 'DisposableStack';\nvar setInternalState = InternalStateModule.set;\nvar getDisposableStackInternalState = InternalStateModule.getterFor(DISPOSABLE_STACK);\nvar HINT = 'sync-dispose';\nvar DISPOSED = 'disposed';\nvar PENDING = 'pending';\nvar getPendingDisposableStackInternalState = function getPendingDisposableStackInternalState(stack) {\n  var internalState = getDisposableStackInternalState(stack);\n  if (internalState.state == DISPOSED) throw $ReferenceError(DISPOSABLE_STACK + ' already disposed');\n  return internalState;\n};\nvar $DisposableStack = function DisposableStack() {\n  setInternalState(anInstance(this, DisposableStackPrototype), {\n    type: DISPOSABLE_STACK,\n    state: PENDING,\n    stack: []\n  });\n  if (!DESCRIPTORS) this.disposed = false;\n};\nvar DisposableStackPrototype = $DisposableStack.prototype;\ndefineBuiltIns(DisposableStackPrototype, {\n  dispose: function dispose() {\n    var internalState = getDisposableStackInternalState(this);\n    if (internalState.state == DISPOSED) return;\n    internalState.state = DISPOSED;\n    if (!DESCRIPTORS) this.disposed = true;\n    var stack = internalState.stack;\n    var i = stack.length;\n    var thrown = false;\n    var suppressed;\n    while (i) {\n      var disposeMethod = stack[--i];\n      stack[i] = null;\n      try {\n        disposeMethod();\n      } catch (errorResult) {\n        if (thrown) {\n          suppressed = new SuppressedError(errorResult, suppressed);\n        } else {\n          thrown = true;\n          suppressed = errorResult;\n        }\n      }\n    }\n    internalState.stack = null;\n    if (thrown) throw suppressed;\n  },\n  use: function use(value) {\n    addDisposableResource(getPendingDisposableStackInternalState(this), value, HINT);\n    return value;\n  },\n  adopt: function adopt(value, onDispose) {\n    var internalState = getPendingDisposableStackInternalState(this);\n    aCallable(onDispose);\n    addDisposableResource(internalState, undefined, HINT, function () {\n      onDispose(value);\n    });\n    return value;\n  },\n  defer: function defer(onDispose) {\n    var internalState = getPendingDisposableStackInternalState(this);\n    aCallable(onDispose);\n    addDisposableResource(internalState, undefined, HINT, onDispose);\n  },\n  move: function move() {\n    var internalState = getPendingDisposableStackInternalState(this);\n    var newDisposableStack = new $DisposableStack();\n    getDisposableStackInternalState(newDisposableStack).stack = internalState.stack;\n    internalState.stack = [];\n    internalState.state = DISPOSED;\n    if (!DESCRIPTORS) this.disposed = true;\n    return newDisposableStack;\n  }\n});\nif (DESCRIPTORS) defineBuiltInAccessor(DisposableStackPrototype, 'disposed', {\n  configurable: true,\n  get: function disposed() {\n    return getDisposableStackInternalState(this).state == DISPOSED;\n  }\n});\ndefineBuiltIn(DisposableStackPrototype, DISPOSE, DisposableStackPrototype.dispose, {\n  name: 'dispose'\n});\ndefineBuiltIn(DisposableStackPrototype, TO_STRING_TAG, DISPOSABLE_STACK, {\n  nonWritable: true\n});\n$({\n  global: true,\n  constructor: true\n}, {\n  DisposableStack: $DisposableStack\n});","map":null,"metadata":{},"sourceType":"script"}