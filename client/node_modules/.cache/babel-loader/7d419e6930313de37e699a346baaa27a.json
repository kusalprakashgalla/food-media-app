{"ast":null,"code":"'use strict';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\n\n// eslint-disable-next-line import/order\nvar config = require(\"../config\");\nvar https = /^http:/.test(config().upload_prefix) ? require('http') : require('https');\nvar querystring = require(\"querystring\");\nvar Q = require('q');\nvar url = require('url');\nvar utils = require(\"../utils\");\nvar ensureOption = require('../utils/ensureOption').defaults(config());\nvar extend = utils.extend,\n  includes = utils.includes,\n  isEmpty = utils.isEmpty;\nvar agent = config.api_proxy ? new https.Agent(config.api_proxy) : null;\nfunction execute_request(method, params, auth, api_url, callback) {\n  var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n  method = method.toUpperCase();\n  var deferred = Q.defer();\n  var query_params = void 0,\n    handle_response = void 0; // declare to user later\n  var key = auth.key;\n  var secret = auth.secret;\n  var oauth_token = auth.oauth_token;\n  var content_type = 'application/x-www-form-urlencoded';\n  if (options.content_type === 'json') {\n    query_params = JSON.stringify(params);\n    content_type = 'application/json';\n  } else {\n    query_params = querystring.stringify(params);\n  }\n  if (method === \"GET\") {\n    api_url += \"?\" + query_params;\n  }\n  var request_options = url.parse(api_url);\n  request_options = extend(request_options, {\n    method: method,\n    headers: {\n      'Content-Type': content_type,\n      'User-Agent': utils.getUserAgent()\n    }\n  });\n  if (oauth_token) {\n    request_options.headers.Authorization = \"Bearer \".concat(oauth_token);\n  } else {\n    request_options.auth = key + \":\" + secret;\n  }\n  if (options.agent != null) {\n    request_options.agent = options.agent;\n  }\n  var proxy = options.api_proxy || config().api_proxy;\n  if (!isEmpty(proxy)) {\n    if (!request_options.agent && agent) {\n      request_options.agent = agent;\n    } else if (!request_options.agent) {\n      request_options.agent = new https.Agent(proxy);\n    } else {\n      console.warn(\"Proxy is set, but request uses a custom agent, proxy is ignored.\");\n    }\n  }\n  if (method !== \"GET\") {\n    request_options.headers['Content-Length'] = Buffer.byteLength(query_params);\n  }\n  handle_response = function handle_response(res) {\n    var _config = config(),\n      _config$hide_sensitiv = _config.hide_sensitive,\n      hide_sensitive = _config$hide_sensitiv === undefined ? false : _config$hide_sensitiv;\n    var sanitizedOptions = _extends({}, request_options);\n    if (hide_sensitive === true) {\n      if (\"auth\" in sanitizedOptions) {\n        delete sanitizedOptions.auth;\n      }\n      if (\"Authorization\" in sanitizedOptions.headers) {\n        delete sanitizedOptions.headers.Authorization;\n      }\n    }\n    if (includes([200, 400, 401, 403, 404, 409, 420, 500], res.statusCode)) {\n      var buffer = \"\";\n      var error = false;\n      res.on(\"data\", function (d) {\n        buffer += d;\n        return buffer;\n      });\n      res.on(\"end\", function () {\n        var result = void 0;\n        if (error) {\n          return;\n        }\n        try {\n          result = JSON.parse(buffer);\n        } catch (e) {\n          result = {\n            error: {\n              message: \"Server return invalid JSON response. Status Code \" + res.statusCode\n            }\n          };\n        }\n        if (result.error) {\n          result.error.http_code = res.statusCode;\n        } else {\n          result.rate_limit_allowed = parseInt(res.headers[\"x-featureratelimit-limit\"]);\n          result.rate_limit_reset_at = new Date(res.headers[\"x-featureratelimit-reset\"]);\n          result.rate_limit_remaining = parseInt(res.headers[\"x-featureratelimit-remaining\"]);\n        }\n        if (result.error) {\n          deferred.reject(Object.assign({\n            request_options: sanitizedOptions,\n            query_params: query_params\n          }, result));\n        } else {\n          deferred.resolve(result);\n        }\n        if (typeof callback === \"function\") {\n          callback(result);\n        }\n      });\n      res.on(\"error\", function (e) {\n        error = true;\n        var err_obj = {\n          error: {\n            message: e,\n            http_code: res.statusCode,\n            request_options: sanitizedOptions,\n            query_params: query_params\n          }\n        };\n        deferred.reject(err_obj.error);\n        if (typeof callback === \"function\") {\n          callback(err_obj);\n        }\n      });\n    } else {\n      var err_obj = {\n        error: {\n          message: \"Server returned unexpected status code - \" + res.statusCode,\n          http_code: res.statusCode,\n          request_options: sanitizedOptions,\n          query_params: query_params\n        }\n      };\n      deferred.reject(err_obj.error);\n      if (typeof callback === \"function\") {\n        callback(err_obj);\n      }\n    }\n  };\n  var request = https.request(request_options, handle_response);\n  request.on(\"error\", function (e) {\n    deferred.reject(e);\n    return typeof callback === \"function\" ? callback({\n      error: e\n    }) : void 0;\n  });\n  request.setTimeout(ensureOption(options, \"timeout\", 60000));\n  if (method !== \"GET\") {\n    request.write(query_params);\n  }\n  request.end();\n  return deferred.promise;\n}\nmodule.exports = execute_request;","map":null,"metadata":{},"sourceType":"script"}