{"ast":null,"code":"'use strict';\n\nvar $ = require('../internals/export');\nvar call = require('../internals/function-call');\nvar aCallable = require('../internals/a-callable');\nvar anObject = require('../internals/an-object');\nvar isObject = require('../internals/is-object');\nvar getBuiltIn = require('../internals/get-built-in');\nvar getIteratorDirect = require('../internals/get-iterator-direct');\nvar closeAsyncIteration = require('../internals/async-iterator-close');\nvar Promise = getBuiltIn('Promise');\nvar $TypeError = TypeError;\n\n// `AsyncIterator.prototype.reduce` method\n// https://github.com/tc39/proposal-async-iterator-helpers\n$({\n  target: 'AsyncIterator',\n  proto: true,\n  real: true\n}, {\n  reduce: function reduce(reducer /* , initialValue */) {\n    anObject(this);\n    aCallable(reducer);\n    var record = getIteratorDirect(this);\n    var iterator = record.iterator;\n    var next = record.next;\n    var noInitial = arguments.length < 2;\n    var accumulator = noInitial ? undefined : arguments[1];\n    var counter = 0;\n    return new Promise(function (resolve, reject) {\n      var ifAbruptCloseAsyncIterator = function ifAbruptCloseAsyncIterator(error) {\n        closeAsyncIteration(iterator, reject, error, reject);\n      };\n      var loop = function loop() {\n        try {\n          Promise.resolve(anObject(call(next, iterator))).then(function (step) {\n            try {\n              if (anObject(step).done) {\n                noInitial ? reject($TypeError('Reduce of empty iterator with no initial value')) : resolve(accumulator);\n              } else {\n                var value = step.value;\n                if (noInitial) {\n                  noInitial = false;\n                  accumulator = value;\n                  loop();\n                } else try {\n                  var result = reducer(accumulator, value, counter);\n                  var handler = function handler($result) {\n                    accumulator = $result;\n                    loop();\n                  };\n                  if (isObject(result)) Promise.resolve(result).then(handler, ifAbruptCloseAsyncIterator);else handler(result);\n                } catch (error3) {\n                  ifAbruptCloseAsyncIterator(error3);\n                }\n              }\n              counter++;\n            } catch (error2) {\n              reject(error2);\n            }\n          }, reject);\n        } catch (error) {\n          reject(error);\n        }\n      };\n      loop();\n    });\n  }\n});","map":null,"metadata":{},"sourceType":"script"}