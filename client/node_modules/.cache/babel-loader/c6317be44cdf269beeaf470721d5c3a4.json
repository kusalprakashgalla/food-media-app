{"ast":null,"code":"'use strict';\n\nvar bind = require('../internals/function-bind-context');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar IndexedObject = require('../internals/indexed-object');\nvar toObject = require('../internals/to-object');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar MapHelpers = require('../internals/map-helpers');\nvar Map = MapHelpers.Map;\nvar mapGet = MapHelpers.get;\nvar mapHas = MapHelpers.has;\nvar mapSet = MapHelpers.set;\nvar push = uncurryThis([].push);\n\n// `Array.prototype.groupToMap` method\n// https://github.com/tc39/proposal-array-grouping\nmodule.exports = function groupToMap(callbackfn /* , thisArg */) {\n  var O = toObject(this);\n  var self = IndexedObject(O);\n  var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  var map = new Map();\n  var length = lengthOfArrayLike(self);\n  var index = 0;\n  var key, value;\n  for (; length > index; index++) {\n    value = self[index];\n    key = boundFunction(value, index, O);\n    if (mapHas(map, key)) push(mapGet(map, key), value);else mapSet(map, key, [value]);\n  }\n  return map;\n};","map":null,"metadata":{},"sourceType":"script"}