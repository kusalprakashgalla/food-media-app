{"ast":null,"code":"'use strict';\n\n// https://github.com/tc39/proposal-iterator-helpers\n// https://github.com/tc39/proposal-array-from-async\nvar call = require('../internals/function-call');\nvar aCallable = require('../internals/a-callable');\nvar anObject = require('../internals/an-object');\nvar isObject = require('../internals/is-object');\nvar doesNotExceedSafeInteger = require('../internals/does-not-exceed-safe-integer');\nvar getBuiltIn = require('../internals/get-built-in');\nvar getIteratorDirect = require('../internals/get-iterator-direct');\nvar closeAsyncIteration = require('../internals/async-iterator-close');\nvar createMethod = function createMethod(TYPE) {\n  var IS_TO_ARRAY = TYPE == 0;\n  var IS_FOR_EACH = TYPE == 1;\n  var IS_EVERY = TYPE == 2;\n  var IS_SOME = TYPE == 3;\n  return function (object, fn, target) {\n    anObject(object);\n    var MAPPING = fn !== undefined;\n    if (MAPPING || !IS_TO_ARRAY) aCallable(fn);\n    var record = getIteratorDirect(object);\n    var Promise = getBuiltIn('Promise');\n    var iterator = record.iterator;\n    var next = record.next;\n    var counter = 0;\n    return new Promise(function (resolve, reject) {\n      var ifAbruptCloseAsyncIterator = function ifAbruptCloseAsyncIterator(error) {\n        closeAsyncIteration(iterator, reject, error, reject);\n      };\n      var loop = function loop() {\n        try {\n          if (MAPPING) try {\n            doesNotExceedSafeInteger(counter);\n          } catch (error5) {\n            ifAbruptCloseAsyncIterator(error5);\n          }\n          Promise.resolve(anObject(call(next, iterator))).then(function (step) {\n            try {\n              if (anObject(step).done) {\n                if (IS_TO_ARRAY) {\n                  target.length = counter;\n                  resolve(target);\n                } else resolve(IS_SOME ? false : IS_EVERY || undefined);\n              } else {\n                var value = step.value;\n                try {\n                  if (MAPPING) {\n                    var result = fn(value, counter);\n                    var handler = function handler($result) {\n                      if (IS_FOR_EACH) {\n                        loop();\n                      } else if (IS_EVERY) {\n                        $result ? loop() : closeAsyncIteration(iterator, resolve, false, reject);\n                      } else if (IS_TO_ARRAY) {\n                        try {\n                          target[counter++] = $result;\n                          loop();\n                        } catch (error4) {\n                          ifAbruptCloseAsyncIterator(error4);\n                        }\n                      } else {\n                        $result ? closeAsyncIteration(iterator, resolve, IS_SOME || value, reject) : loop();\n                      }\n                    };\n                    if (isObject(result)) Promise.resolve(result).then(handler, ifAbruptCloseAsyncIterator);else handler(result);\n                  } else {\n                    target[counter++] = value;\n                    loop();\n                  }\n                } catch (error3) {\n                  ifAbruptCloseAsyncIterator(error3);\n                }\n              }\n            } catch (error2) {\n              reject(error2);\n            }\n          }, reject);\n        } catch (error) {\n          reject(error);\n        }\n      };\n      loop();\n    });\n  };\n};\nmodule.exports = {\n  toArray: createMethod(0),\n  forEach: createMethod(1),\n  every: createMethod(2),\n  some: createMethod(3),\n  find: createMethod(4)\n};","map":null,"metadata":{},"sourceType":"script"}