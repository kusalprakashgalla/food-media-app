{"ast":null,"code":"'use strict';\n\nvar call = require('../internals/function-call');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar bind = require('../internals/function-bind-context');\nvar anObject = require('../internals/an-object');\nvar aCallable = require('../internals/a-callable');\nvar isNullOrUndefined = require('../internals/is-null-or-undefined');\nvar getMethod = require('../internals/get-method');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar ASYNC_DISPOSE = wellKnownSymbol('asyncDispose');\nvar DISPOSE = wellKnownSymbol('dispose');\nvar push = uncurryThis([].push);\n\n// `GetDisposeMethod` abstract operation\n// https://tc39.es/proposal-explicit-resource-management/#sec-getdisposemethod\nvar getDisposeMethod = function getDisposeMethod(V, hint) {\n  if (hint === 'async-dispose') {\n    var method = getMethod(V, ASYNC_DISPOSE);\n    if (method !== undefined) return method;\n    method = getMethod(V, DISPOSE);\n    return function () {\n      call(method, this);\n    };\n  }\n  return getMethod(V, DISPOSE);\n};\n\n// `CreateDisposableResource` abstract operation\n// https://tc39.es/proposal-explicit-resource-management/#sec-createdisposableresource\nvar createDisposableResource = function createDisposableResource(V, hint, method) {\n  if (arguments.length < 3 && !isNullOrUndefined(V)) {\n    method = aCallable(getDisposeMethod(anObject(V), hint));\n  }\n  return method === undefined ? function () {\n    return undefined;\n  } : bind(method, V);\n};\n\n// `AddDisposableResource` abstract operation\n// https://tc39.es/proposal-explicit-resource-management/#sec-adddisposableresource\nmodule.exports = function (disposable, V, hint, method) {\n  var resource;\n  if (arguments.length < 4) {\n    // When `V`` is either `null` or `undefined` and hint is `async-dispose`,\n    // we record that the resource was evaluated to ensure we will still perform an `Await` when resources are later disposed.\n    if (isNullOrUndefined(V) && hint === 'sync-dispose') return;\n    resource = createDisposableResource(V, hint);\n  } else {\n    resource = createDisposableResource(undefined, hint, method);\n  }\n  push(disposable.stack, resource);\n};","map":null,"metadata":{},"sourceType":"script"}