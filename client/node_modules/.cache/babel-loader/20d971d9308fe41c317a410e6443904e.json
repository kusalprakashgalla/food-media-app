{"ast":null,"code":"'use strict';\n\n// TODO: Remove from `core-js@4`\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar isBigIntArray = require('../internals/is-big-int-array');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\nvar toBigInt = require('../internals/to-big-int');\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\nvar fails = require('../internals/fails');\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar getTypedArrayConstructor = ArrayBufferViewCore.getTypedArrayConstructor;\nvar exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\nvar max = Math.max;\nvar min = Math.min;\n\n// some early implementations, like WebKit, does not follow the final semantic\nvar PROPER_ORDER = !fails(function () {\n  // eslint-disable-next-line es/no-typed-arrays -- required for testing\n  var array = new Int8Array([1]);\n  var spliced = array.toSpliced(1, 0, {\n    valueOf: function valueOf() {\n      array[0] = 2;\n      return 3;\n    }\n  });\n  return spliced[0] !== 2 || spliced[1] !== 3;\n});\n\n// `%TypedArray%.prototype.toSpliced` method\n// https://tc39.es/proposal-change-array-by-copy/#sec-%typedarray%.prototype.toSpliced\nexportTypedArrayMethod('toSpliced', function toSpliced(start, deleteCount /* , ...items */) {\n  var O = aTypedArray(this);\n  var C = getTypedArrayConstructor(O);\n  var len = lengthOfArrayLike(O);\n  var actualStart = toAbsoluteIndex(start, len);\n  var argumentsLength = arguments.length;\n  var k = 0;\n  var insertCount, actualDeleteCount, thisIsBigIntArray, convertedItems, value, newLen, A;\n  if (argumentsLength === 0) {\n    insertCount = actualDeleteCount = 0;\n  } else if (argumentsLength === 1) {\n    insertCount = 0;\n    actualDeleteCount = len - actualStart;\n  } else {\n    actualDeleteCount = min(max(toIntegerOrInfinity(deleteCount), 0), len - actualStart);\n    insertCount = argumentsLength - 2;\n    if (insertCount) {\n      convertedItems = new C(insertCount);\n      thisIsBigIntArray = isBigIntArray(convertedItems);\n      for (var i = 2; i < argumentsLength; i++) {\n        value = arguments[i];\n        // FF30- typed arrays doesn't properly convert objects to typed array values\n        convertedItems[i - 2] = thisIsBigIntArray ? toBigInt(value) : +value;\n      }\n    }\n  }\n  newLen = len + insertCount - actualDeleteCount;\n  A = new C(newLen);\n  for (; k < actualStart; k++) A[k] = O[k];\n  for (; k < actualStart + insertCount; k++) A[k] = convertedItems[k - actualStart];\n  for (; k < newLen; k++) A[k] = O[k + actualDeleteCount - insertCount];\n  return A;\n}, !PROPER_ORDER);","map":null,"metadata":{},"sourceType":"script"}