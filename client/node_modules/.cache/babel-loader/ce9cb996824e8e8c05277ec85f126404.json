{"ast":null,"code":"var _classCallCheck = require(\"C:\\\\Users\\\\kusal\\\\OneDrive\\\\Desktop\\\\Placement_Files\\\\placement_projects\\\\mern-project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\kusal\\\\OneDrive\\\\Desktop\\\\Placement_Files\\\\placement_projects\\\\mern-project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\kusal\\\\OneDrive\\\\Desktop\\\\Placement_Files\\\\placement_projects\\\\mern-project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\kusal\\\\OneDrive\\\\Desktop\\\\Placement_Files\\\\placement_projects\\\\mern-project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"C:\\\\Users\\\\kusal\\\\OneDrive\\\\Desktop\\\\Placement_Files\\\\placement_projects\\\\mern-project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\nvar Transform = require(\"stream\").Transform;\nvar UploadStream = /*#__PURE__*/function (_Transform) {\n  \"use strict\";\n\n  _inherits(UploadStream, _Transform);\n  function UploadStream(options) {\n    var _this;\n    _classCallCheck(this, UploadStream);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(UploadStream).call(this));\n    _this.boundary = options.boundary;\n    return _this;\n  }\n  _createClass(UploadStream, [{\n    key: \"_transform\",\n    value: function _transform(data, encoding, next) {\n      var buffer = Buffer.isBuffer(data) ? data : Buffer.from(data, encoding);\n      this.push(buffer);\n      next();\n    }\n  }, {\n    key: \"_flush\",\n    value: function _flush(next) {\n      this.push(Buffer.from(\"\\r\\n\", 'ascii'));\n      this.push(Buffer.from(\"--\" + this.boundary + \"--\", 'ascii'));\n      return next();\n    }\n  }]);\n  return UploadStream;\n}(Transform);\nmodule.exports = UploadStream;","map":null,"metadata":{},"sourceType":"script"}