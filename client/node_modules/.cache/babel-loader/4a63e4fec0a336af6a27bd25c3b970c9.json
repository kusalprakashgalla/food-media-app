{"ast":null,"code":"'use strict';\n\nvar aCallable = require('../internals/a-callable');\nvar anObject = require('../internals/an-object');\nvar call = require('../internals/function-call');\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\nvar getIteratorDirect = require('../internals/get-iterator-direct');\nvar INVALID_SIZE = 'Invalid size';\nvar $RangeError = RangeError;\nvar $TypeError = TypeError;\nvar max = Math.max;\nvar SetRecord = function SetRecord(set, size, has, keys) {\n  this.set = set;\n  this.size = size;\n  this.has = has;\n  this.keys = keys;\n};\nSetRecord.prototype = {\n  getIterator: function getIterator() {\n    return getIteratorDirect(anObject(call(this.keys, this.set)));\n  },\n  includes: function includes(it) {\n    return call(this.has, this.set, it);\n  }\n};\n\n// `GetSetRecord` abstract operation\n// https://tc39.es/proposal-set-methods/#sec-getsetrecord\nmodule.exports = function (obj) {\n  anObject(obj);\n  var numSize = +obj.size;\n  // NOTE: If size is undefined, then numSize will be NaN\n  // eslint-disable-next-line no-self-compare -- NaN check\n  if (numSize != numSize) throw $TypeError(INVALID_SIZE);\n  var intSize = toIntegerOrInfinity(numSize);\n  if (intSize < 0) throw $RangeError(INVALID_SIZE);\n  return new SetRecord(obj, max(intSize, 0), aCallable(obj.has), aCallable(obj.keys));\n};","map":null,"metadata":{},"sourceType":"script"}