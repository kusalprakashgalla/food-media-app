{"ast":null,"code":"'use strict';\n\nvar InternalStateModule = require('../internals/internal-state');\nvar createIteratorConstructor = require('../internals/iterator-create-constructor');\nvar createIterResultObject = require('../internals/create-iter-result-object');\nvar isNullOrUndefined = require('../internals/is-null-or-undefined');\nvar isObject = require('../internals/is-object');\nvar defineBuiltInAccessor = require('../internals/define-built-in-accessor');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar INCORRECT_RANGE = 'Incorrect Iterator.range arguments';\nvar NUMERIC_RANGE_ITERATOR = 'NumericRangeIterator';\nvar setInternalState = InternalStateModule.set;\nvar getInternalState = InternalStateModule.getterFor(NUMERIC_RANGE_ITERATOR);\nvar $RangeError = RangeError;\nvar $TypeError = TypeError;\nvar $RangeIterator = createIteratorConstructor(function NumericRangeIterator(start, end, option, type, zero, one) {\n  // TODO: Drop the first `typeof` check after removing legacy methods in `core-js@4`\n  if (typeof start != type || end !== Infinity && end !== -Infinity && typeof end != type) {\n    throw $TypeError(INCORRECT_RANGE);\n  }\n  if (start === Infinity || start === -Infinity) {\n    throw $RangeError(INCORRECT_RANGE);\n  }\n  var ifIncrease = end > start;\n  var inclusiveEnd = false;\n  var step;\n  if (option === undefined) {\n    step = undefined;\n  } else if (isObject(option)) {\n    step = option.step;\n    inclusiveEnd = !!option.inclusive;\n  } else if (typeof option == type) {\n    step = option;\n  } else {\n    throw $TypeError(INCORRECT_RANGE);\n  }\n  if (isNullOrUndefined(step)) {\n    step = ifIncrease ? one : -one;\n  }\n  if (typeof step != type) {\n    throw $TypeError(INCORRECT_RANGE);\n  }\n  if (step === Infinity || step === -Infinity || step === zero && start !== end) {\n    throw $RangeError(INCORRECT_RANGE);\n  }\n  // eslint-disable-next-line no-self-compare -- NaN check\n  var hitsEnd = start != start || end != end || step != step || end > start !== step > zero;\n  setInternalState(this, {\n    type: NUMERIC_RANGE_ITERATOR,\n    start: start,\n    end: end,\n    step: step,\n    inclusive: inclusiveEnd,\n    hitsEnd: hitsEnd,\n    currentCount: zero,\n    zero: zero\n  });\n  if (!DESCRIPTORS) {\n    this.start = start;\n    this.end = end;\n    this.step = step;\n    this.inclusive = inclusiveEnd;\n  }\n}, NUMERIC_RANGE_ITERATOR, function next() {\n  var state = getInternalState(this);\n  if (state.hitsEnd) return createIterResultObject(undefined, true);\n  var start = state.start;\n  var end = state.end;\n  var step = state.step;\n  var currentYieldingValue = start + step * state.currentCount++;\n  if (currentYieldingValue === end) state.hitsEnd = true;\n  var inclusiveEnd = state.inclusive;\n  var endCondition;\n  if (end > start) {\n    endCondition = inclusiveEnd ? currentYieldingValue > end : currentYieldingValue >= end;\n  } else {\n    endCondition = inclusiveEnd ? end > currentYieldingValue : end >= currentYieldingValue;\n  }\n  if (endCondition) {\n    state.hitsEnd = true;\n    return createIterResultObject(undefined, true);\n  }\n  return createIterResultObject(currentYieldingValue, false);\n});\nvar addGetter = function addGetter(key) {\n  defineBuiltInAccessor($RangeIterator.prototype, key, {\n    get: function get() {\n      return getInternalState(this)[key];\n    },\n    set: function set() {/* empty */},\n    configurable: true,\n    enumerable: false\n  });\n};\nif (DESCRIPTORS) {\n  addGetter('start');\n  addGetter('end');\n  addGetter('inclusive');\n  addGetter('step');\n}\nmodule.exports = $RangeIterator;","map":null,"metadata":{},"sourceType":"script"}