{"ast":null,"code":"'use strict';\n\nvar global = require('../internals/global');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar uncurryThisAccessor = require('../internals/function-uncurry-this-accessor');\nvar toIndex = require('../internals/to-index');\nvar isDetached = require('../internals/array-buffer-is-detached');\nvar arrayBufferByteLength = require('../internals/array-buffer-byte-length');\nvar PROPER_TRANSFER = require('../internals/structured-clone-proper-transfer');\nvar TypeError = global.TypeError;\nvar structuredClone = global.structuredClone;\nvar ArrayBuffer = global.ArrayBuffer;\nvar DataView = global.DataView;\nvar min = Math.min;\nvar ArrayBufferPrototype = ArrayBuffer.prototype;\nvar DataViewPrototype = DataView.prototype;\nvar slice = uncurryThis(ArrayBufferPrototype.slice);\nvar isResizable = uncurryThisAccessor(ArrayBufferPrototype, 'resizable', 'get');\nvar maxByteLength = uncurryThisAccessor(ArrayBufferPrototype, 'maxByteLength', 'get');\nvar getInt8 = uncurryThis(DataViewPrototype.getInt8);\nvar setInt8 = uncurryThis(DataViewPrototype.setInt8);\nmodule.exports = PROPER_TRANSFER && function (arrayBuffer, newLength, preserveResizability) {\n  var byteLength = arrayBufferByteLength(arrayBuffer);\n  var newByteLength = newLength === undefined ? byteLength : toIndex(newLength);\n  var fixedLength = !isResizable || !isResizable(arrayBuffer);\n  if (isDetached(arrayBuffer)) throw TypeError('ArrayBuffer is detached');\n  var newBuffer = structuredClone(arrayBuffer, {\n    transfer: [arrayBuffer]\n  });\n  if (byteLength == newByteLength && (preserveResizability || fixedLength)) return newBuffer;\n  if (byteLength >= newByteLength && (!preserveResizability || fixedLength)) return slice(newBuffer, 0, newByteLength);\n  var options = preserveResizability && !fixedLength && maxByteLength ? {\n    maxByteLength: maxByteLength(newBuffer)\n  } : undefined;\n  var newNewBuffer = new ArrayBuffer(newByteLength, options);\n  var a = new DataView(newBuffer);\n  var b = new DataView(newNewBuffer);\n  var copyLength = min(newByteLength, byteLength);\n  for (var i = 0; i < copyLength; i++) setInt8(b, i, getInt8(a, i));\n  return newNewBuffer;\n};","map":null,"metadata":{},"sourceType":"script"}