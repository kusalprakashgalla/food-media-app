{"ast":null,"code":"var _objectSpread = require(\"C:\\\\Users\\\\kusal\\\\OneDrive\\\\Desktop\\\\Placement_Files\\\\placement_projects\\\\mern-project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\nvar _classCallCheck = require(\"C:\\\\Users\\\\kusal\\\\OneDrive\\\\Desktop\\\\Placement_Files\\\\placement_projects\\\\mern-project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\kusal\\\\OneDrive\\\\Desktop\\\\Placement_Files\\\\placement_projects\\\\mern-project\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n/* eslint-disable class-methods-use-this */\n\nvar CACHE = Symbol.for(\"com.cloudinary.cache\");\nvar CACHE_ADAPTER = Symbol.for(\"com.cloudinary.cacheAdapter\");\nvar _require = require('./utils'),\n  ensurePresenceOf = _require.ensurePresenceOf,\n  generate_transformation_string = _require.generate_transformation_string;\n/**\n * The adapter used to communicate with the underlying cache storage\n */\nvar CacheAdapter = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function CacheAdapter() {\n    _classCallCheck(this, CacheAdapter);\n  }\n  _createClass(CacheAdapter, [{\n    key: \"get\",\n    /**\n     * Get a value from the cache\n     * @param {string} publicId\n     * @param {string} type\n     * @param {string} resourceType\n     * @param {string} transformation\n     * @param {string} format\n     * @return {*} the value associated with the provided arguments\n     */\n    value: function get(publicId, type, resourceType, transformation, format) {}\n    /**\n     * Set a new value in the cache\n     * @param {string} publicId\n     * @param {string} type\n     * @param {string} resourceType\n     * @param {string} transformation\n     * @param {string} format\n     * @param {*} value\n     */\n  }, {\n    key: \"set\",\n    value: function set(publicId, type, resourceType, transformation, format, value) {}\n    /**\n     * Delete all values in the cache\n     */\n  }, {\n    key: \"flushAll\",\n    value: function flushAll() {}\n  }]);\n  return CacheAdapter;\n}();\n/**\n * @class Cache\n * Stores and retrieves values identified by publicId / options pairs\n */\nvar Cache = {\n  /**\n   * The adapter interface. Extend this class to implement a specific adapter.\n   * @type CacheAdapter\n   */\n  CacheAdapter: CacheAdapter,\n  /**\n   * Set the cache adapter\n   * @param {CacheAdapter} adapter The cache adapter\n   */\n  setAdapter: function setAdapter(adapter) {\n    if (this.adapter) {\n      console.warn(\"Overriding existing cache adapter\");\n    }\n    this.adapter = adapter;\n  },\n  /**\n   * Get the adapter the Cache is using\n   * @return {CacheAdapter} the current cache adapter\n   */\n  getAdapter: function getAdapter() {\n    return this.adapter;\n  },\n  /**\n   * Get an item from the cache\n   * @param {string} publicId\n   * @param {object} options\n   * @return {*}\n   */\n  get: function get(publicId, options) {\n    if (!this.adapter) {\n      return undefined;\n    }\n    ensurePresenceOf({\n      publicId: publicId\n    });\n    var transformation = generate_transformation_string(_objectSpread({}, options));\n    return this.adapter.get(publicId, options.type || 'upload', options.resource_type || 'image', transformation, options.format);\n  },\n  /**\n   * Set a new value in the cache\n   * @param {string} publicId\n   * @param {object} options\n   * @param {*} value\n   * @return {*}\n   */\n  set: function set(publicId, options, value) {\n    if (!this.adapter) {\n      return undefined;\n    }\n    ensurePresenceOf({\n      publicId: publicId,\n      value: value\n    });\n    var transformation = generate_transformation_string(_objectSpread({}, options));\n    return this.adapter.set(publicId, options.type || 'upload', options.resource_type || 'image', transformation, options.format, value);\n  },\n  /**\n   * Clear all items in the cache\n   * @return {*} Returns the value from the adapter's flushAll() method\n   */\n  flushAll: function flushAll() {\n    if (!this.adapter) {\n      return undefined;\n    }\n    return this.adapter.flushAll();\n  }\n};\n\n// Define singleton property\nObject.defineProperty(Cache, \"instance\", {\n  get: function get() {\n    return global[CACHE];\n  }\n});\nObject.defineProperty(Cache, \"adapter\", {\n  /**\n   *\n   * @return {CacheAdapter} The current cache adapter\n   */\n  get: function get() {\n    return global[CACHE_ADAPTER];\n  },\n  /**\n   * Set the cache adapter to be used by Cache\n   * @param {CacheAdapter} adapter Cache adapter\n   */\n  set: function set(adapter) {\n    global[CACHE_ADAPTER] = adapter;\n  }\n});\nObject.freeze(Cache);\n\n// Instantiate the singleton\nvar symbols = Object.getOwnPropertySymbols(global);\nif (symbols.indexOf(CACHE) < 0) {\n  global[CACHE] = Cache;\n}\n\n/**\n * Store key value pairs\n\n */\nmodule.exports = Cache;","map":null,"metadata":{},"sourceType":"script"}