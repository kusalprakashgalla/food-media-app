{"ast":null,"code":"'use strict';\n\n// https://github.com/tc39/proposal-async-explicit-resource-management\nvar $ = require('../internals/export');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar getBuiltIn = require('../internals/get-built-in');\nvar aCallable = require('../internals/a-callable');\nvar anInstance = require('../internals/an-instance');\nvar defineBuiltIn = require('../internals/define-built-in');\nvar defineBuiltIns = require('../internals/define-built-ins');\nvar defineBuiltInAccessor = require('../internals/define-built-in-accessor');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar InternalStateModule = require('../internals/internal-state');\nvar addDisposableResource = require('../internals/add-disposable-resource');\nvar Promise = getBuiltIn('Promise');\nvar SuppressedError = getBuiltIn('SuppressedError');\nvar $ReferenceError = ReferenceError;\nvar ASYNC_DISPOSE = wellKnownSymbol('asyncDispose');\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\nvar ASYNC_DISPOSABLE_STACK = 'AsyncDisposableStack';\nvar setInternalState = InternalStateModule.set;\nvar getAsyncDisposableStackInternalState = InternalStateModule.getterFor(ASYNC_DISPOSABLE_STACK);\nvar HINT = 'async-dispose';\nvar DISPOSED = 'disposed';\nvar PENDING = 'pending';\nvar getPendingAsyncDisposableStackInternalState = function getPendingAsyncDisposableStackInternalState(stack) {\n  var internalState = getAsyncDisposableStackInternalState(stack);\n  if (internalState.state == DISPOSED) throw $ReferenceError(ASYNC_DISPOSABLE_STACK + ' already disposed');\n  return internalState;\n};\nvar $AsyncDisposableStack = function AsyncDisposableStack() {\n  setInternalState(anInstance(this, AsyncDisposableStackPrototype), {\n    type: ASYNC_DISPOSABLE_STACK,\n    state: PENDING,\n    stack: []\n  });\n  if (!DESCRIPTORS) this.disposed = false;\n};\nvar AsyncDisposableStackPrototype = $AsyncDisposableStack.prototype;\ndefineBuiltIns(AsyncDisposableStackPrototype, {\n  disposeAsync: function disposeAsync() {\n    var asyncDisposableStack = this;\n    return new Promise(function (resolve, reject) {\n      var internalState = getAsyncDisposableStackInternalState(asyncDisposableStack);\n      if (internalState.state == DISPOSED) return resolve(undefined);\n      internalState.state = DISPOSED;\n      if (!DESCRIPTORS) asyncDisposableStack.disposed = true;\n      var stack = internalState.stack;\n      var i = stack.length;\n      var thrown = false;\n      var suppressed;\n      var handleError = function handleError(result) {\n        if (thrown) {\n          suppressed = new SuppressedError(result, suppressed);\n        } else {\n          thrown = true;\n          suppressed = result;\n        }\n        loop();\n      };\n      var loop = function loop() {\n        if (i) {\n          var disposeMethod = stack[--i];\n          stack[i] = null;\n          try {\n            Promise.resolve(disposeMethod()).then(loop, handleError);\n          } catch (error) {\n            handleError(error);\n          }\n        } else {\n          internalState.stack = null;\n          thrown ? reject(suppressed) : resolve(undefined);\n        }\n      };\n      loop();\n    });\n  },\n  use: function use(value) {\n    addDisposableResource(getPendingAsyncDisposableStackInternalState(this), value, HINT);\n    return value;\n  },\n  adopt: function adopt(value, onDispose) {\n    var internalState = getPendingAsyncDisposableStackInternalState(this);\n    aCallable(onDispose);\n    addDisposableResource(internalState, undefined, HINT, function () {\n      return onDispose(value);\n    });\n    return value;\n  },\n  defer: function defer(onDispose) {\n    var internalState = getPendingAsyncDisposableStackInternalState(this);\n    aCallable(onDispose);\n    addDisposableResource(internalState, undefined, HINT, onDispose);\n  },\n  move: function move() {\n    var internalState = getPendingAsyncDisposableStackInternalState(this);\n    var newAsyncDisposableStack = new $AsyncDisposableStack();\n    getAsyncDisposableStackInternalState(newAsyncDisposableStack).stack = internalState.stack;\n    internalState.stack = [];\n    internalState.state = DISPOSED;\n    if (!DESCRIPTORS) this.disposed = true;\n    return newAsyncDisposableStack;\n  }\n});\nif (DESCRIPTORS) defineBuiltInAccessor(AsyncDisposableStackPrototype, 'disposed', {\n  configurable: true,\n  get: function disposed() {\n    return getAsyncDisposableStackInternalState(this).state == DISPOSED;\n  }\n});\ndefineBuiltIn(AsyncDisposableStackPrototype, ASYNC_DISPOSE, AsyncDisposableStackPrototype.disposeAsync, {\n  name: 'disposeAsync'\n});\ndefineBuiltIn(AsyncDisposableStackPrototype, TO_STRING_TAG, ASYNC_DISPOSABLE_STACK, {\n  nonWritable: true\n});\n$({\n  global: true,\n  constructor: true\n}, {\n  AsyncDisposableStack: $AsyncDisposableStack\n});","map":null,"metadata":{},"sourceType":"script"}