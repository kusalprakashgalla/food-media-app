{"ast":null,"code":"'use strict';\n\nvar $ = require('../internals/export');\nvar call = require('../internals/function-call');\nvar anObject = require('../internals/an-object');\nvar getIteratorDirect = require('../internals/get-iterator-direct');\nvar notANaN = require('../internals/not-a-nan');\nvar toPositiveInteger = require('../internals/to-positive-integer');\nvar createAsyncIteratorProxy = require('../internals/async-iterator-create-proxy');\nvar createIterResultObject = require('../internals/create-iter-result-object');\nvar IS_PURE = require('../internals/is-pure');\nvar AsyncIteratorProxy = createAsyncIteratorProxy(function (Promise) {\n  var state = this;\n  return new Promise(function (resolve, reject) {\n    var doneAndReject = function doneAndReject(error) {\n      state.done = true;\n      reject(error);\n    };\n    var loop = function loop() {\n      try {\n        Promise.resolve(anObject(call(state.next, state.iterator))).then(function (step) {\n          try {\n            if (anObject(step).done) {\n              state.done = true;\n              resolve(createIterResultObject(undefined, true));\n            } else if (state.remaining) {\n              state.remaining--;\n              loop();\n            } else resolve(createIterResultObject(step.value, false));\n          } catch (err) {\n            doneAndReject(err);\n          }\n        }, doneAndReject);\n      } catch (error) {\n        doneAndReject(error);\n      }\n    };\n    loop();\n  });\n});\n\n// `AsyncIterator.prototype.drop` method\n// https://github.com/tc39/proposal-async-iterator-helpers\n$({\n  target: 'AsyncIterator',\n  proto: true,\n  real: true,\n  forced: IS_PURE\n}, {\n  drop: function drop(limit) {\n    anObject(this);\n    var remaining = toPositiveInteger(notANaN(+limit));\n    return new AsyncIteratorProxy(getIteratorDirect(this), {\n      remaining: remaining\n    });\n  }\n});","map":null,"metadata":{},"sourceType":"script"}