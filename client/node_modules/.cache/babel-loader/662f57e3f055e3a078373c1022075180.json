{"ast":null,"code":"'use strict';\n\nvar call = require('../internals/function-call');\nvar perform = require('../internals/perform');\nvar anObject = require('../internals/an-object');\nvar create = require('../internals/object-create');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar defineBuiltIns = require('../internals/define-built-ins');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar InternalStateModule = require('../internals/internal-state');\nvar getBuiltIn = require('../internals/get-built-in');\nvar getMethod = require('../internals/get-method');\nvar AsyncIteratorPrototype = require('../internals/async-iterator-prototype');\nvar createIterResultObject = require('../internals/create-iter-result-object');\nvar iteratorClose = require('../internals/iterator-close');\nvar Promise = getBuiltIn('Promise');\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\nvar ASYNC_ITERATOR_HELPER = 'AsyncIteratorHelper';\nvar WRAP_FOR_VALID_ASYNC_ITERATOR = 'WrapForValidAsyncIterator';\nvar setInternalState = InternalStateModule.set;\nvar createAsyncIteratorProxyPrototype = function createAsyncIteratorProxyPrototype(IS_ITERATOR) {\n  var IS_GENERATOR = !IS_ITERATOR;\n  var getInternalState = InternalStateModule.getterFor(IS_ITERATOR ? WRAP_FOR_VALID_ASYNC_ITERATOR : ASYNC_ITERATOR_HELPER);\n  var getStateOrEarlyExit = function getStateOrEarlyExit(that) {\n    var stateCompletion = perform(function () {\n      return getInternalState(that);\n    });\n    var stateError = stateCompletion.error;\n    var state = stateCompletion.value;\n    if (stateError || IS_GENERATOR && state.done) {\n      return {\n        exit: true,\n        value: stateError ? Promise.reject(state) : Promise.resolve(createIterResultObject(undefined, true))\n      };\n    }\n    return {\n      exit: false,\n      value: state\n    };\n  };\n  return defineBuiltIns(create(AsyncIteratorPrototype), {\n    next: function next() {\n      var stateCompletion = getStateOrEarlyExit(this);\n      var state = stateCompletion.value;\n      if (stateCompletion.exit) return state;\n      var handlerCompletion = perform(function () {\n        return anObject(state.nextHandler(Promise));\n      });\n      var handlerError = handlerCompletion.error;\n      var value = handlerCompletion.value;\n      if (handlerError) state.done = true;\n      return handlerError ? Promise.reject(value) : Promise.resolve(value);\n    },\n    'return': function _return() {\n      var stateCompletion = getStateOrEarlyExit(this);\n      var state = stateCompletion.value;\n      if (stateCompletion.exit) return state;\n      state.done = true;\n      var iterator = state.iterator;\n      var returnMethod, result;\n      var completion = perform(function () {\n        if (state.inner) try {\n          iteratorClose(state.inner.iterator, 'normal');\n        } catch (error) {\n          return iteratorClose(iterator, 'throw', error);\n        }\n        return getMethod(iterator, 'return');\n      });\n      returnMethod = result = completion.value;\n      if (completion.error) return Promise.reject(result);\n      if (returnMethod === undefined) return Promise.resolve(createIterResultObject(undefined, true));\n      completion = perform(function () {\n        return call(returnMethod, iterator);\n      });\n      result = completion.value;\n      if (completion.error) return Promise.reject(result);\n      return IS_ITERATOR ? Promise.resolve(result) : Promise.resolve(result).then(function (resolved) {\n        anObject(resolved);\n        return createIterResultObject(undefined, true);\n      });\n    }\n  });\n};\nvar WrapForValidAsyncIteratorPrototype = createAsyncIteratorProxyPrototype(true);\nvar AsyncIteratorHelperPrototype = createAsyncIteratorProxyPrototype(false);\ncreateNonEnumerableProperty(AsyncIteratorHelperPrototype, TO_STRING_TAG, 'Async Iterator Helper');\nmodule.exports = function (nextHandler, IS_ITERATOR) {\n  var AsyncIteratorProxy = function AsyncIterator(record, state) {\n    if (state) {\n      state.iterator = record.iterator;\n      state.next = record.next;\n    } else state = record;\n    state.type = IS_ITERATOR ? WRAP_FOR_VALID_ASYNC_ITERATOR : ASYNC_ITERATOR_HELPER;\n    state.nextHandler = nextHandler;\n    state.counter = 0;\n    state.done = false;\n    setInternalState(this, state);\n  };\n  AsyncIteratorProxy.prototype = IS_ITERATOR ? WrapForValidAsyncIteratorPrototype : AsyncIteratorHelperPrototype;\n  return AsyncIteratorProxy;\n};","map":null,"metadata":{},"sourceType":"script"}