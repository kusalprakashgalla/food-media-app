{"ast":null,"code":"'use strict';\n\nvar $ = require('../internals/export');\nvar call = require('../internals/function-call');\nvar aCallable = require('../internals/a-callable');\nvar anObject = require('../internals/an-object');\nvar isObject = require('../internals/is-object');\nvar getIteratorDirect = require('../internals/get-iterator-direct');\nvar createAsyncIteratorProxy = require('../internals/async-iterator-create-proxy');\nvar createIterResultObject = require('../internals/create-iter-result-object');\nvar closeAsyncIteration = require('../internals/async-iterator-close');\nvar IS_PURE = require('../internals/is-pure');\nvar AsyncIteratorProxy = createAsyncIteratorProxy(function (Promise) {\n  var state = this;\n  var iterator = state.iterator;\n  var predicate = state.predicate;\n  return new Promise(function (resolve, reject) {\n    var doneAndReject = function doneAndReject(error) {\n      state.done = true;\n      reject(error);\n    };\n    var ifAbruptCloseAsyncIterator = function ifAbruptCloseAsyncIterator(error) {\n      closeAsyncIteration(iterator, doneAndReject, error, doneAndReject);\n    };\n    var loop = function loop() {\n      try {\n        Promise.resolve(anObject(call(state.next, iterator))).then(function (step) {\n          try {\n            if (anObject(step).done) {\n              state.done = true;\n              resolve(createIterResultObject(undefined, true));\n            } else {\n              var value = step.value;\n              try {\n                var result = predicate(value, state.counter++);\n                var handler = function handler(selected) {\n                  selected ? resolve(createIterResultObject(value, false)) : loop();\n                };\n                if (isObject(result)) Promise.resolve(result).then(handler, ifAbruptCloseAsyncIterator);else handler(result);\n              } catch (error3) {\n                ifAbruptCloseAsyncIterator(error3);\n              }\n            }\n          } catch (error2) {\n            doneAndReject(error2);\n          }\n        }, doneAndReject);\n      } catch (error) {\n        doneAndReject(error);\n      }\n    };\n    loop();\n  });\n});\n\n// `AsyncIterator.prototype.filter` method\n// https://github.com/tc39/proposal-async-iterator-helpers\n$({\n  target: 'AsyncIterator',\n  proto: true,\n  real: true,\n  forced: IS_PURE\n}, {\n  filter: function filter(predicate) {\n    anObject(this);\n    aCallable(predicate);\n    return new AsyncIteratorProxy(getIteratorDirect(this), {\n      predicate: predicate\n    });\n  }\n});","map":null,"metadata":{},"sourceType":"script"}