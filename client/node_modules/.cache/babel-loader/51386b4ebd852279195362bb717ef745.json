{"ast":null,"code":"'use strict';\n\n// https://github.com/tc39/proposal-observable\nvar $ = require('../internals/export');\nvar call = require('../internals/function-call');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar setSpecies = require('../internals/set-species');\nvar aCallable = require('../internals/a-callable');\nvar anObject = require('../internals/an-object');\nvar anInstance = require('../internals/an-instance');\nvar isCallable = require('../internals/is-callable');\nvar isNullOrUndefined = require('../internals/is-null-or-undefined');\nvar isObject = require('../internals/is-object');\nvar getMethod = require('../internals/get-method');\nvar defineBuiltIn = require('../internals/define-built-in');\nvar defineBuiltIns = require('../internals/define-built-ins');\nvar defineBuiltInAccessor = require('../internals/define-built-in-accessor');\nvar hostReportErrors = require('../internals/host-report-errors');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar InternalStateModule = require('../internals/internal-state');\nvar OBSERVABLE_FORCED = require('../internals/observable-forced');\nvar $$OBSERVABLE = wellKnownSymbol('observable');\nvar OBSERVABLE = 'Observable';\nvar SUBSCRIPTION = 'Subscription';\nvar SUBSCRIPTION_OBSERVER = 'SubscriptionObserver';\nvar getterFor = InternalStateModule.getterFor;\nvar setInternalState = InternalStateModule.set;\nvar getObservableInternalState = getterFor(OBSERVABLE);\nvar getSubscriptionInternalState = getterFor(SUBSCRIPTION);\nvar getSubscriptionObserverInternalState = getterFor(SUBSCRIPTION_OBSERVER);\nvar SubscriptionState = function SubscriptionState(observer) {\n  this.observer = anObject(observer);\n  this.cleanup = undefined;\n  this.subscriptionObserver = undefined;\n};\nSubscriptionState.prototype = {\n  type: SUBSCRIPTION,\n  clean: function clean() {\n    var cleanup = this.cleanup;\n    if (cleanup) {\n      this.cleanup = undefined;\n      try {\n        cleanup();\n      } catch (error) {\n        hostReportErrors(error);\n      }\n    }\n  },\n  close: function close() {\n    if (!DESCRIPTORS) {\n      var subscription = this.facade;\n      var subscriptionObserver = this.subscriptionObserver;\n      subscription.closed = true;\n      if (subscriptionObserver) subscriptionObserver.closed = true;\n    }\n    this.observer = undefined;\n  },\n  isClosed: function isClosed() {\n    return this.observer === undefined;\n  }\n};\nvar Subscription = function Subscription(observer, subscriber) {\n  var subscriptionState = setInternalState(this, new SubscriptionState(observer));\n  var start;\n  if (!DESCRIPTORS) this.closed = false;\n  try {\n    if (start = getMethod(observer, 'start')) call(start, observer, this);\n  } catch (error) {\n    hostReportErrors(error);\n  }\n  if (subscriptionState.isClosed()) return;\n  var subscriptionObserver = subscriptionState.subscriptionObserver = new SubscriptionObserver(subscriptionState);\n  try {\n    var cleanup = subscriber(subscriptionObserver);\n    var subscription = cleanup;\n    if (!isNullOrUndefined(cleanup)) subscriptionState.cleanup = isCallable(cleanup.unsubscribe) ? function () {\n      subscription.unsubscribe();\n    } : aCallable(cleanup);\n  } catch (error) {\n    subscriptionObserver.error(error);\n    return;\n  }\n  if (subscriptionState.isClosed()) subscriptionState.clean();\n};\nSubscription.prototype = defineBuiltIns({}, {\n  unsubscribe: function unsubscribe() {\n    var subscriptionState = getSubscriptionInternalState(this);\n    if (!subscriptionState.isClosed()) {\n      subscriptionState.close();\n      subscriptionState.clean();\n    }\n  }\n});\nif (DESCRIPTORS) defineBuiltInAccessor(Subscription.prototype, 'closed', {\n  configurable: true,\n  get: function closed() {\n    return getSubscriptionInternalState(this).isClosed();\n  }\n});\nvar SubscriptionObserver = function SubscriptionObserver(subscriptionState) {\n  setInternalState(this, {\n    type: SUBSCRIPTION_OBSERVER,\n    subscriptionState: subscriptionState\n  });\n  if (!DESCRIPTORS) this.closed = false;\n};\nSubscriptionObserver.prototype = defineBuiltIns({}, {\n  next: function next(value) {\n    var subscriptionState = getSubscriptionObserverInternalState(this).subscriptionState;\n    if (!subscriptionState.isClosed()) {\n      var observer = subscriptionState.observer;\n      try {\n        var nextMethod = getMethod(observer, 'next');\n        if (nextMethod) call(nextMethod, observer, value);\n      } catch (error) {\n        hostReportErrors(error);\n      }\n    }\n  },\n  error: function error(value) {\n    var subscriptionState = getSubscriptionObserverInternalState(this).subscriptionState;\n    if (!subscriptionState.isClosed()) {\n      var observer = subscriptionState.observer;\n      subscriptionState.close();\n      try {\n        var errorMethod = getMethod(observer, 'error');\n        if (errorMethod) call(errorMethod, observer, value);else hostReportErrors(value);\n      } catch (err) {\n        hostReportErrors(err);\n      }\n      subscriptionState.clean();\n    }\n  },\n  complete: function complete() {\n    var subscriptionState = getSubscriptionObserverInternalState(this).subscriptionState;\n    if (!subscriptionState.isClosed()) {\n      var observer = subscriptionState.observer;\n      subscriptionState.close();\n      try {\n        var completeMethod = getMethod(observer, 'complete');\n        if (completeMethod) call(completeMethod, observer);\n      } catch (error) {\n        hostReportErrors(error);\n      }\n      subscriptionState.clean();\n    }\n  }\n});\nif (DESCRIPTORS) defineBuiltInAccessor(SubscriptionObserver.prototype, 'closed', {\n  configurable: true,\n  get: function closed() {\n    return getSubscriptionObserverInternalState(this).subscriptionState.isClosed();\n  }\n});\nvar $Observable = function Observable(subscriber) {\n  anInstance(this, ObservablePrototype);\n  setInternalState(this, {\n    type: OBSERVABLE,\n    subscriber: aCallable(subscriber)\n  });\n};\nvar ObservablePrototype = $Observable.prototype;\ndefineBuiltIns(ObservablePrototype, {\n  subscribe: function subscribe(observer) {\n    var length = arguments.length;\n    return new Subscription(isCallable(observer) ? {\n      next: observer,\n      error: length > 1 ? arguments[1] : undefined,\n      complete: length > 2 ? arguments[2] : undefined\n    } : isObject(observer) ? observer : {}, getObservableInternalState(this).subscriber);\n  }\n});\ndefineBuiltIn(ObservablePrototype, $$OBSERVABLE, function () {\n  return this;\n});\n$({\n  global: true,\n  constructor: true,\n  forced: OBSERVABLE_FORCED\n}, {\n  Observable: $Observable\n});\nsetSpecies(OBSERVABLE);","map":null,"metadata":{},"sourceType":"script"}