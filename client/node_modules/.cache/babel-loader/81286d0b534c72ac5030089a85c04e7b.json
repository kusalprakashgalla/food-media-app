{"ast":null,"code":"'use strict';\n\nvar $ = require('../internals/export');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar $isCallable = require('../internals/is-callable');\nvar inspectSource = require('../internals/inspect-source');\nvar hasOwn = require('../internals/has-own-property');\nvar DESCRIPTORS = require('../internals/descriptors');\n\n// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar classRegExp = /^\\s*class\\b/;\nvar exec = uncurryThis(classRegExp.exec);\nvar isClassConstructor = function isClassConstructor(argument) {\n  try {\n    // `Function#toString` throws on some built-it function in some legacy engines\n    // (for example, `DOMQuad` and similar in FF41-)\n    if (!DESCRIPTORS || !exec(classRegExp, inspectSource(argument))) return false;\n  } catch (error) {/* empty */}\n  var prototype = getOwnPropertyDescriptor(argument, 'prototype');\n  return !!prototype && hasOwn(prototype, 'writable') && !prototype.writable;\n};\n\n// `Function.isCallable` method\n// https://github.com/caitp/TC39-Proposals/blob/trunk/tc39-reflect-isconstructor-iscallable.md\n$({\n  target: 'Function',\n  stat: true,\n  sham: true,\n  forced: true\n}, {\n  isCallable: function isCallable(argument) {\n    return $isCallable(argument) && !isClassConstructor(argument);\n  }\n});","map":null,"metadata":{},"sourceType":"script"}